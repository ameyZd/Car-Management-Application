//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CarManagement.DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CarManagementEntities : DbContext
    {
        public CarManagementEntities()
            : base("name=CarManagementEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AvailablePremiumCar> AvailablePremiumCars { get; set; }
        public virtual DbSet<CarsData> CarsDatas { get; set; }
        public virtual DbSet<PremiumCarsData> PremiumCarsDatas { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<PremiumCarsRepository> PremiumCarsRepositories { get; set; }
    
        public virtual int RefreshAvailablePremiumCars()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RefreshAvailablePremiumCars");
        }
    
        public virtual int sp_TruncateCarEntries()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_TruncateCarEntries");
        }
    
        public virtual int sp_updateCar(Nullable<int> carID, string carName, Nullable<decimal> carMileage, string carOwnerName, string carOwnerEmail)
        {
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(int));
    
            var carNameParameter = carName != null ?
                new ObjectParameter("CarName", carName) :
                new ObjectParameter("CarName", typeof(string));
    
            var carMileageParameter = carMileage.HasValue ?
                new ObjectParameter("CarMileage", carMileage) :
                new ObjectParameter("CarMileage", typeof(decimal));
    
            var carOwnerNameParameter = carOwnerName != null ?
                new ObjectParameter("CarOwnerName", carOwnerName) :
                new ObjectParameter("CarOwnerName", typeof(string));
    
            var carOwnerEmailParameter = carOwnerEmail != null ?
                new ObjectParameter("CarOwnerEmail", carOwnerEmail) :
                new ObjectParameter("CarOwnerEmail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_updateCar", carIDParameter, carNameParameter, carMileageParameter, carOwnerNameParameter, carOwnerEmailParameter);
        }
    }
}
